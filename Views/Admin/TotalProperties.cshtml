@model IEnumerable<NestFinder.Models.Property>
@using Microsoft.AspNet.Identity;

@{
    ViewBag.Title = "All Properties";
    var userId = User.Identity.GetUserId();
}

<h2 class="text-center mb-4">All Listed Properties</h2>

<!-- ✅ Notification Container -->
<div id="toast-container"></div>

<div class="container">
    <div class="text-end mb-3">
        <button id="downloadPropertiesBtn" class="btn btn-success shadow-lg">
            <i class="fas fa-download"></i> Download Report
        </button>
    </div>

    <div class="row">
        @foreach (var property in Model)
        {
            <div class="col-md-4 mb-4">
                <div class="card shadow-lg border-0">
                    <!-- ✅ Image Carousel -->
                    <div id="carousel-@property.Id" class="carousel slide" data-bs-ride="carousel">
                        <div class="carousel-indicators">
                            @if (!string.IsNullOrEmpty(property.ImageUrls))
                            {
                                var imageArray = property.ImageUrls.Split(';');
                                for (int i = 0; i < imageArray.Length; i++)
                                {
                                    <button type="button" data-bs-target="#carousel-@property.Id" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")"></button>
                                }
                            }
                        </div>
                        <div class="carousel-inner">
                            @if (!string.IsNullOrEmpty(property.ImageUrls))
                            {
                                var imageArray = property.ImageUrls.Split(';');
                                for (int i = 0; i < imageArray.Length; i++)
                                {
                                    <div class="carousel-item @(i == 0 ? "active" : "")">
                                        <img src="@imageArray[i]" class="d-block w-100 rounded-top" alt="Property Image" style="height: 200px; object-fit: cover;">
                                    </div>
                                }
                            }
                        </div>
                    </div>

                    <div class="card-body">
                        <h5 class="card-title">@property.Title</h5>
                        <p class="card-text text-muted">@property.Description</p>
                        <p><strong>Location:</strong> @property.City, @property.State</p>
                        <p><strong>Price:</strong> ₹@property.Price</p>

                        <!-- ✅ Property Status -->
                        <p>
                            <strong>Status:</strong>
                            @if (property.IsApproved)
                            {
                                <span class="badge bg-success">Approved</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Pending</span>
                            }
                        </p>

                        <div class="d-flex justify-content-between align-items-center">
                            <!-- ✅ Admin View Details -->
                            <a href="@Url.Action("PropertyDetails", "Admin", new { id = property.Id })" class="btn btn-info btn-sm">View Details</a>

                            <!-- ✅ Approve Button -->
                            @if (!property.IsApproved)
                            {
                                <button class="btn btn-success btn-sm" onclick="approveProperty(@property.Id)">Approve</button>
                            }

                            <!-- ✅ Delete Button -->
                        <button class="btn btn-danger btn-sm" onclick="showDeleteModal('@property.Id', '@property.Title')">
                            <i class="fas fa-trash-alt"></i> Delete
                        </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<!-- ✅ Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">
                    <i class="fas fa-exclamation-triangle"></i> Confirm Deletion
                </h5>
                <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="fw-bold">Are you sure you want to delete this property?</p>
                <p class="text-muted">Property: <span id="deletePropertyTitle" class="fw-bold"></span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> Cancel
                </button>
                <button id="confirmDeleteBtn" class="btn btn-danger">
                    <i class="fas fa-trash"></i> Yes, Delete
                </button>
            </div>
        </div>
    </div>
</div>

<!-- ✅ JavaScript for Admin Actions and CSV Download -->
<script>
     let deletePropertyId = null;

    function showDeleteModal(propertyId, propertyTitle) {
        deletePropertyId = propertyId;
        document.getElementById("deletePropertyTitle").innerText = propertyTitle;
        var deleteModal = new bootstrap.Modal(document.getElementById("deleteModal"));
        deleteModal.show();
    }

    document.getElementById("confirmDeleteBtn").addEventListener("click", function () {
        fetch('@Url.Action("DeleteProperty", "Admin")', {
            method: "POST",
            headers: { "Content-Type": "application/json", "X-Requested-With": "XMLHttpRequest" },
            body: JSON.stringify({ propertyId: deletePropertyId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast("❌ Property Deleted", "danger");
                setTimeout(() => location.reload(), 1000);
            } else {
                showToast("⚠ Error: " + data.message, "warning");
            }
        })
        .catch(error => console.error("❌ AJAX Error:", error));
    });
    function approveProperty(propertyId) {
        fetch('@Url.Action("ApproveProperty", "Admin")', {
            method: "POST",
            headers: { "Content-Type": "application/json", "X-Requested-With": "XMLHttpRequest" },
            body: JSON.stringify({ propertyId: propertyId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast("✅ Property Approved", "success");
                setTimeout(() => location.reload(), 1000);
            } else {
                showToast("⚠ Error: " + data.message, "warning");
            }
        })
        .catch(error => console.error("❌ AJAX Error:", error));
    }

    function deleteProperty(propertyId) {
        if (!confirm("Are you sure you want to delete this property?")) return;

        fetch('@Url.Action("DeleteProperty", "Admin")', {
            method: "POST",
            headers: { "Content-Type": "application/json", "X-Requested-With": "XMLHttpRequest" },
            body: JSON.stringify({ propertyId: propertyId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast("❌ Property Deleted", "danger");
                setTimeout(() => location.reload(), 1000);
            } else {
                showToast("⚠ Error: " + data.message, "warning");
            }
        })
        .catch(error => console.error("❌ AJAX Error:", error));
    }

    function showToast(message, type) {
        var toast = document.createElement("div");
        toast.className = "toast-message toast-" + type;
        toast.innerText = message;
        document.getElementById("toast-container").appendChild(toast);

        setTimeout(() => {
            toast.classList.add("fade-out");
            setTimeout(() => toast.remove(), 500);
        }, 3000);
    }

    // ✅ Download Properties Report as CSV
    document.getElementById("downloadPropertiesBtn").addEventListener("click", function () {
        let csvContent = "Property ID, Title, Address, City, State, Price, Status\n";

        document.querySelectorAll(".card-body").forEach(card => {
            let title = card.querySelector(".card-title")?.innerText || "";
            let address = card.querySelector(".card-text.text-muted")?.innerText || "";
            let location = card.querySelectorAll("p")[1]?.innerText.replace("Location: ", "") || "";
            let price = card.querySelectorAll("p")[2]?.innerText.replace("Price: ₹", "") || "";
            let status = card.querySelector("span.badge")?.innerText || "Unknown";

            csvContent += `"${title}","${address}","${location}","${price}","${status}"\n`;
        });

        let blob = new Blob([csvContent], { type: "text/csv" });
        let link = document.createElement("a");
        link.href = URL.createObjectURL(blob);
        link.download = "AllPropertiesReport.csv";
        link.click();
    });
</script>

<!-- ✅ Toast Notification Styling -->
<style>
    #toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
    }

    .toast-message {
        background: #fff;
        color: #333;
        padding: 12px 20px;
        margin-bottom: 10px;
        border-radius: 5px;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        font-weight: bold;
        display: inline-block;
        min-width: 250px;
        text-align: center;
        animation: slide-in 0.5s ease-out;
    }

    .toast-success {
        border-left: 6px solid #28a745;
    }

    .toast-danger {
        border-left: 6px solid #dc3545;
    }

    .toast-warning {
        border-left: 6px solid #ffc107;
    }

    .fade-out {
        animation: fadeOut 0.5s forwards;
    }
</style>
