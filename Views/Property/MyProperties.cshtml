@model IEnumerable<NestFinder.Models.Property>
@using Microsoft.AspNet.Identity;

@{
    ViewBag.Title = "My Uploaded Properties";
}

<h2 class="text-center mb-4">🏡 My Uploaded Properties</h2>

<div class="container">
    <div class="row">
        @if (!Model.Any())
        {
            <p class="text-muted text-center">You haven't uploaded any properties yet.</p>
        }
        else
        {
            foreach (var property in Model)
            {
                <div class="col-md-4 mb-4">
                    <div class="card shadow-lg border-0">
                        <div id="carousel-@property.Id" class="carousel slide" data-bs-ride="carousel">
                            <div class="carousel-inner">
                                @if (!string.IsNullOrEmpty(property.ImageUrls))
                                {
                                    var images = property.ImageUrls.Split(';');
                                    for (int i = 0; i < images.Length; i++)
                                    {
                                        <div class="carousel-item @(i == 0 ? "active" : "")">
                                            <img src="@images[i]" class="d-block w-100 rounded-top" alt="Property Image" style="height: 200px; object-fit: cover;">
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@property.Title</h5>
                            <p class="card-text text-muted">@property.Description</p>
                            <p><strong>Location:</strong> @property.City, @property.State</p>
                            <p><strong>Price:</strong> ₹@property.Price</p>

                            <div class="d-flex justify-content-between align-items-center">
                                <a href="@Url.Action("Details", "Property", new { id = property.Id })" class="btn btn-primary btn-sm">View</a>
                                <a href="@Url.Action("Edit", "Property", new { id = property.Id })" class="btn btn-warning btn-sm">Edit</a>
                                <button class="btn btn-danger btn-sm" onclick="openDeleteModal(@property.Id)">Delete</button>



                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
    <!-- 🛑 Delete Confirmation Modal -->
    <div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this property? <br> This action <strong>cannot be undone</strong>.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
                </div>
            </div>
        </div>
    </div>

</div>
<!-- 🔥 JavaScript for Delete Modal -->
<script>
    let propertyToDelete = null;

    function openDeleteModal(propertyId) {
        propertyToDelete = propertyId; // Store ID for deletion
        var deleteModal = new bootstrap.Modal(document.getElementById('deleteConfirmationModal'));
        deleteModal.show();
    }

    document.getElementById("confirmDeleteBtn").addEventListener("click", function () {
        if (!propertyToDelete) return;

        fetch('/Property/DeleteProperty', {
            method: 'POST',
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ id: propertyToDelete })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("✅ Property deleted successfully!");
                    location.reload(); // Refresh after deletion
                } else {
                    alert("⚠ " + data.message);
                }
            })
            .catch(error => console.error("⚠ Error:", error));
    });
</script>


