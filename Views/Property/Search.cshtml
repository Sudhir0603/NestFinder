@model NestFinder.Models.SearchViewModel

@{
    ViewBag.Title = "Search Properties";
}



<!-- ✅ Search Properties - Improved UI -->
<div class="container mt-4">
    <div class="card shadow-lg border-0 rounded-lg p-4">
        <h2 class="text-center text-primary mb-3">
            <i class="fa fa-search"></i> Search Properties
        </h2>

        <form method="post">
            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label">Title:</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fa fa-home"></i></span>
                        <input type="text" class="form-control search-input" name="Title" placeholder="Enter property title" value="@Model.Title">
                    </div>
                </div>

                <div class="col-md-4">
                    <label class="form-label">City:</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fa fa-map-marker"></i></span>
                        <input type="text" class="form-control search-input" name="City" placeholder="Enter city" value="@Model.City">
                    </div>
                </div>

                <div class="col-md-4">
                    <label class="form-label">State:</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fa fa-globe"></i></span>
                        <input type="text" class="form-control search-input" name="State" placeholder="Enter state" value="@Model.State">
                    </div>
                </div>
            </div>

            <div class="row g-3 mt-2">
                <div class="col-md-4">
                    <label class="form-label">Amenities:</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fa fa-cogs"></i></span>
                        <input type="text" class="form-control search-input" name="Amenities" placeholder="WiFi, Parking, AC, etc." value="@Model.Amenities">
                    </div>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Suitable For:</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fa fa-user"></i></span>
                        <input type="text" class="form-control search-input" name="SuitableFor" placeholder="Students, Working Professionals, etc." value="@Model.SuitableFor">
                    </div>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Gender:</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fa fa-venus-mars"></i></span>
                        <select class="form-select search-input" name="Gender">
                            <option value="">Any</option>
                            <option value="Boys" @(Model.Gender == "Boys" ? "selected" : "")>Boys</option>
                            <option value="Girls" @(Model.Gender == "Girls" ? "selected" : "")>Girls</option>
                            <option value="Both" @(Model.Gender == "Both" ? "selected" : "")>Both</option>
                        </select>
                    </div>
                </div>
            </div>

            <div class="row g-3 mt-2">
                <div class="col-md-4">
                    <label class="form-label">Min Rent:</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fa fa-rupee"></i></span>
                        <input type="number" class="form-control search-input" name="MinRent" placeholder="Min Rent" value="@Model.MinRent">
                    </div>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Max Rent:</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fa fa-rupee"></i></span>
                        <input type="number" class="form-control search-input" name="MaxRent" placeholder="Max Rent" value="@Model.MaxRent">
                    </div>
                </div>

                <div class="col-md-4 d-flex align-items-end">
                    <button type="submit" class="btn btn-primary w-100 shadow-sm">
                        <i class="fa fa-search"></i> Search
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- ✅ JavaScript for Input Highlighting -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        let inputs = document.querySelectorAll(".search-input");

        inputs.forEach(input => {
            input.addEventListener("focus", function () {
                this.parentElement.classList.add("input-focus");
            });

            input.addEventListener("blur", function () {
                this.parentElement.classList.remove("input-focus");
            });
        });
    });
</script>

<!-- ✅ Extra CSS for Better UI -->
<style>
    

    .btn-primary {
        font-size: 1.1rem;
        padding: 10px;
        border-radius: 8px;
    }

        

    .card {
        border-radius: 12px;
        transition: 0.3s;
    }

        
</style>


<hr />
@if (Model.SearchResults != null && Model.SearchResults.Any())
{
    <h3>Search Results</h3>
    <div class="row">
        @foreach (var property in Model.SearchResults)
        {
            bool isFavorite = ViewBag.FavoritePropertyIds != null && ViewBag.FavoritePropertyIds.Contains(property.Id);

            <div class="col-md-4 mb-4">
                <div class="card shadow-lg border-0">
                    <div id="carousel-@property.Id" class="carousel slide" data-bs-ride="carousel">
                        <div class="carousel-indicators">
                            @if (!string.IsNullOrEmpty(property.ImageUrls))
                            {
                                var imageArray = property.ImageUrls.Split(';');
                                for (int i = 0; i < imageArray.Length; i++)
                                {
                                    <button type="button" data-bs-target="#carousel-@property.Id" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")"></button>
                                }
                            }
                        </div>
                        <div class="carousel-inner">
                            @if (!string.IsNullOrEmpty(property.ImageUrls))
                            {
                                var imageArray = property.ImageUrls.Split(';');
                                for (int i = 0; i < imageArray.Length; i++)
                                {
                                    <div class="carousel-item @(i == 0 ? "active" : "")">
                                        <img src="@imageArray[i]" class="d-block w-100 rounded-top" alt="Property Image" style="height: 200px; object-fit: cover;">
                                    </div>
                                }
                            }
                        </div>
                    </div>

                    <div class="card-body">
                        <h5 class="card-title">@property.Title</h5>
                        <p class="card-text text-muted">@property.Description</p>
                        <p><strong>Location:</strong> @property.City, @property.State</p>
                        <p><strong>Price:</strong> ₹@property.Price</p>

                        <div class="d-flex justify-content-between align-items-center">
                            <a href="@Url.Action("Details", "Property", new { id = property.Id })" class="btn btn-primary btn-sm">View Details</a>

                            <!-- Favorite Button with Heart Icon -->
                            <button class="favorite-btn"
                                    id="favorite-btn-@property.Id"
                                    onclick="toggleFavorite(@property.Id)">
                                <i class="fa @(isFavorite ? "fa-heart favorite-active" : "fa-heart favorite-inactive") fa-lg"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else if (Model.SearchResults != null)
{
    <p class="text-muted">No properties found.</p>
}
<div id="toast-container"></div>


<!-- ✅ JavaScript for Favorite Toggle & Notifications -->
<script>
    function showToast(message, type) {
        var toastContainer = document.getElementById("toast-container");

        if (!toastContainer) {
            console.error("❌ Toast container not found!");
            return;
        }

        var toast = document.createElement("div");
        toast.className = "toast-message toast-" + type;
        toast.innerText = message;

        toastContainer.appendChild(toast);

        // Show toast with slide-in effect
        setTimeout(() => {
            toast.classList.add("fade-out");
            setTimeout(() => toast.remove(), 500);
        }, 3000);
    }

    function toggleFavorite(propertyId) {
        var button = document.getElementById("favorite-btn-" + propertyId);
        var icon = button.querySelector("i");
        var isFavorite = icon.classList.contains("favorite-active");

        fetch(isFavorite ? '/Property/RemoveFromFavorites' : '/Property/AddToFavorites', {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-Requested-With": "XMLHttpRequest"
            },
            body: JSON.stringify({ PropertyId: propertyId })
        })
            .then(response => response.json())
            .then(data => {
                console.log("Response:", data); // Debugging

                if (data.success) {
                    icon.classList.toggle("favorite-active");
                    icon.classList.toggle("favorite-inactive");
                    showToast(isFavorite ? "Removed from favorites ❌" : "Added to favorites ✅", isFavorite ? "danger" : "success");
                } else {
                    showToast("⚠ Error: " + data.message, "warning");
                }
            })
            .catch(error => {
                console.error("❌ AJAX Error:", error);
                showToast("⚠ Error processing request", "warning");
            });
    }

</script>
<!-- ✅ Toast Notification Styling -->
<style>
    #toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
    }

    .toast-message {
        background: #fff;
        color: #333;
        padding: 12px 20px;
        margin-bottom: 10px;
        border-radius: 5px;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        font-weight: bold;
        display: inline-block;
        min-width: 250px;
        text-align: center;
        animation: slide-in 0.5s ease-out;
    }

    .toast-success { border-left: 6px solid #28a745; } /* Green for success */
    .toast-danger { border-left: 6px solid #dc3545; } /* Red for removed */
    .toast-warning { border-left: 6px solid #ffc107; } /* Yellow for errors */

    .fade-out {
        animation: fadeOut 0.5s forwards;
    }

    @*@keyframes slide-in {
        from { opacity: 0; transform: translateX(50px); }
        to { opacity: 1; transform: translateX(0); }
    }

    @keyframes fadeOut {
        from { opacity: 1; }
        to { opacity: 0; }
    }*@

    .favorite-btn {
        background: none;
        border: none;
        cursor: pointer;
        outline: none;
        transition: transform 0.2s ease-in-out;
    }

    .favorite-btn:hover {
        transform: scale(1.1);
    }

    .favorite-active {
        color: red;
    }

    .favorite-inactive {
        color: #555;
    }

    .favorite-inactive:hover {
        color: #ff4d4d;
    }
</style>

<!-- ✅ Font Awesome for Heart Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">