@model NestFinder.Models.Property

@{
    ViewBag.Title = "Post Property";
}
<!-- Bootstrap Icons for Android-like UI -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">

<div class="container mt-5">
    <h2 class="mb-4 text-center text-primary">Post a New Property</h2>

    @using (Html.BeginForm("Create", "Property", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="card shadow-lg border-0 rounded-4">
            <div class="card-body">
                <h4 class="card-title mb-4 text-secondary">Property Details</h4>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        @Html.LabelFor(model => model.Title, new { @class = "form-label fw-bold" })
                        @Html.TextBoxFor(model => model.Title, new { @class = "form-control", placeholder = "Enter Property Title" })
                    </div>

                    <div class="col-md-6 mb-3">
                        @Html.LabelFor(model => model.Price, new { @class = "form-label fw-bold" })
                        @Html.TextBoxFor(model => model.Price, new { @class = "form-control", type = "number", step = "0.01", placeholder = "Enter Price" })
                    </div>

                    <div class="col-md-6 mb-3">
                        @Html.LabelFor(model => model.Contact, new { @class = "form-label fw-bold" })
                        @Html.TextBoxFor(model => model.Contact, new { @class = "form-control", type = "tel", placeholder = "Enter Contact Number" })
                    </div>

                </div>
                <div class="mb-3">
                    @Html.LabelFor(model => model.City, new { @class = "form-label fw-bold" })
                    @Html.TextBoxFor(model => model.City, new { @class = "form-control", placeholder = "City " })
                </div>
                <div class="mb-3">
                    @Html.LabelFor(model => model.State, new { @class = "form-label fw-bold" })
                    @Html.TextBoxFor(model => model.State, new { @class = "form-control", placeholder = " " })
                </div>
                <div class="mb-3">
                    @Html.LabelFor(model => model.Description, new { @class = "form-label fw-bold" })
                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control", rows = "3", placeholder = "Enter Property Description" })
                </div>
                <div class="mb-3">
                    @Html.LabelFor(model => model.LocationLink, new { @class = "form-label fw-bold" })
                    @Html.TextBoxFor(model => model.LocationLink, new { @class = "form-control", placeholder = "Paste Google Maps Link Here" })
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        @Html.LabelFor(model => model.Address, new { @class = "form-label fw-bold" })
                        @Html.TextBoxFor(model => model.Address, new { @class = "form-control", placeholder = "Enter Address" })
                    </div>

                    <div class="col-md-6 mb-3">
                        @Html.LabelFor(model => model.RoomType, new { @class = "form-label fw-bold" })
                        @Html.DropDownListFor(model => model.RoomType, new SelectList(new[]
                        {
                            "Private Room", "Shared Room", "Studio Apartment"
                        }), "Select Room Type", new { @class = "form-select" })
                    </div>
                </div>
                <!-- Gender Selection with Android App Style -->
                <div class="mb-3">
                    @Html.Label("Gender", new { @class = "form-label fw-bold" })
                    <div class="row">
                        <div class="col d-flex flex-wrap gap-2">
                            <input type="radio" class="btn-check" name="Gender" value="Boys" id="boys">
                            <label class="btn btn-outline-primary shadow-sm rounded-pill px-4" for="boys">
                                <i class="bi bi-person-fill"></i> Boys
                            </label>

                            <input type="radio" class="btn-check" name="Gender" value="Girls" id="girls">
                            <label class="btn btn-outline-danger shadow-sm rounded-pill px-4" for="girls">
                                <i class="bi bi-person-hearts"></i> Girls
                            </label>

                            <input type="radio" class="btn-check" name="Gender" value="Both" id="both">
                            <label class="btn btn-outline-success shadow-sm rounded-pill px-4" for="both">
                                <i class="bi bi-people-fill"></i> Both
                            </label>
                        </div>
                    </div>
                </div>




                <div class="row">
                    <!-- Furnishing Status -->
                    <div class="col-md-6 mb-3">
                        @*<label class="form-label fw-bold text-primary"> </label>*@
                        <i class="bi bi-house-fill"></i>  @Html.Label("Furnishing Status", new { @class = "form-label fw-bold" })
                        <div class="input-group shadow-sm rounded">
                            <span class="input-group-text bg-light"><i class="bi bi-lamp-fill"></i></span>
                            @Html.DropDownListFor(model => model.FurnishingStatus, new SelectList(new[]
                            {
                                "Fully Furnished", "Semi-Furnished", "Unfurnished"
                            }), "Select Furnishing Status", new { @class = "form-select" })
                        </div>
                    </div>

                    <!-- Notice Period -->
                    <div class="col-md-6 mb-3">
                        <i class="bi bi-hourglass-split"></i>  @Html.Label("Notice Period", new { @class = "form-label fw-bold" })
                        <div class="input-group shadow-sm rounded">
                            <span class="input-group-text bg-light"><i class="bi bi-calendar-event-fill"></i></span>
                            @Html.DropDownListFor(model => model.NoticePeriod, new SelectList(new[]
                            {
                                "15 Days", "1 Month", "2 Months", "3 Months"
                            }), "Select Notice Period", new { @class = "form-select" })
                        </div>
                    </div>
                </div>



                <!-- Suitable For Section with Android App Style -->
                <div class="mb-3">
                    @Html.Label("Suitable For", new { @class = "form-label fw-bold" })
                    <div class="row">
                        <div class="col d-flex flex-wrap gap-2">
                            <input type="checkbox" class="btn-check" id="students" name="SuitableFor" value="Students">
                            <label class="btn btn-outline-primary shadow-sm rounded-pill px-4" for="students">
                                <i class="bi bi-mortarboard"></i> Students
                            </label>

                            <input type="checkbox" class="btn-check" id="professionals" name="SuitableFor" value="Working Professionals">
                            <label class="btn btn-outline-primary shadow-sm rounded-pill px-4" for="professionals">
                                <i class="bi bi-briefcase"></i> Working Professionals
                            </label>
                        </div>
                    </div>
                </div>


                <!-- Amenities Section with Android App Style -->
                <div class="mb-3">
                    <label class="form-label fw-bold text-primary">Amenities</label>
                    <div class="row">
                        <div class="col d-flex flex-wrap gap-2">
                            <!-- WiFi -->
                            <input type="checkbox" class="btn-check" id="wifi" name="Amenities" value="WiFi">
                            <label class="btn btn-outline-primary shadow-sm rounded-pill px-4" for="wifi"><i class="bi bi-wifi"></i> WiFi</label>

                            <!-- Air Conditioning -->
                            <input type="checkbox" class="btn-check" id="AC" name="Amenities" value="AC">
                            <label class="btn btn-outline-primary shadow-sm rounded-pill px-4" for="AC"><i class="bi bi-snow"></i> AC</label>

                            <!-- Parking -->
                            <input type="checkbox" class="btn-check" id="parking" name="Amenities" value="Parking">
                            <label class="btn btn-outline-primary shadow-sm rounded-pill px-4" for="parking"><i class="bi bi-car-front-fill"></i> Parking</label>

                            <!-- Laundry -->
                            <input type="checkbox" class="btn-check" id="laundry" name="Amenities" value="Laundry">
                            <label class="btn btn-outline-primary shadow-sm rounded-pill px-4" for="laundry"><i class="bi bi-basket"></i> Laundry</label>

                            <!-- Food Included -->
                            <input type="checkbox" class="btn-check" id="food" name="Amenities" value="Food Included">
                            <label class="btn btn-outline-primary shadow-sm rounded-pill px-4" for="food"><i class="bi bi-egg-fried"></i> Food Included</label>

                            <!-- Housekeeping -->
                            <input type="checkbox" class="btn-check" id="housekeeping" name="Amenities" value="Housekeeping">
                            <label class="btn btn-outline-primary shadow-sm rounded-pill px-4" for="housekeeping"><i class="bi bi-broom"></i> Housekeeping</label>

                            <!-- Power Backup -->
                            <input type="checkbox" class="btn-check" id="backup" name="Amenities" value="Power Backup">
                            <label class="btn btn-outline-primary shadow-sm rounded-pill px-4" for="backup"><i class="bi bi-lightning-fill"></i> Power Backup</label>

                            <!-- CCTV Security -->
                            <input type="checkbox" class="btn-check" id="cctv" name="Amenities" value="CCTV Security">
                            <label class="btn btn-outline-primary shadow-sm rounded-pill px-4" for="cctv"><i class="bi bi-camera-video-fill"></i> CCTV Security</label>

                            <!-- Geyser -->
                            <input type="checkbox" class="btn-check" id="geyser" name="Amenities" value="Geyser">
                            <label class="btn btn-outline-primary shadow-sm rounded-pill px-4" for="geyser"><i class="bi bi-droplet"></i> Geyser</label>

                            <!-- Gym -->
                            <input type="checkbox" class="btn-check" id="gym" name="Amenities" value="Gym">
                            <label class="btn btn-outline-primary shadow-sm rounded-pill px-4" for="gym"><i class="bi bi-barbell"></i> Gym</label>

                            <!-- Common TV -->
                            <input type="checkbox" class="btn-check" id="tv" name="Amenities" value="Common TV">
                            <label class="btn btn-outline-primary shadow-sm rounded-pill px-4" for="tv"><i class="bi bi-tv"></i> Common TV</label>

                            <!-- Balcony -->
                            <input type="checkbox" class="btn-check" id="balcony" name="Amenities" value="Balcony">
                            <label class="btn btn-outline-primary shadow-sm rounded-pill px-4" for="balcony"><i class="bi bi-house-door"></i> Balcony</label>

                            <!-- Lift -->
                            <input type="checkbox" class="btn-check" id="lift" name="Amenities" value="Lift">
                            <label class="btn btn-outline-primary shadow-sm rounded-pill px-4" for="lift"><i class="bi bi-box-arrow-up"></i> Lift</label>

                            <!-- Garden Area -->
                            <input type="checkbox" class="btn-check" id="garden" name="Amenities" value="Garden Area">
                            <label class="btn btn-outline-primary shadow-sm rounded-pill px-4" for="garden"><i class="bi bi-flower1"></i> Garden Area</label>

                            <!-- Study Room -->
                            <input type="checkbox" class="btn-check" id="study" name="Amenities" value="Study Room">
                            <label class="btn btn-outline-primary shadow-sm rounded-pill px-4" for="study"><i class="bi bi-journal"></i> Study Room</label>

                            <!-- Hot & Cold Water -->
                            <input type="checkbox" class="btn-check" id="hotColdWater" name="Amenities" value="Hot & Cold Water">
                            <label class="btn btn-outline-primary shadow-sm rounded-pill px-4" for="hotColdWater"><i class="bi bi-thermometer-half"></i> Hot & Cold Water</label>

                            <!-- Water Purifier -->
                            <input type="checkbox" class="btn-check" id="purifier" name="Amenities" value="Water Purifier">
                            <label class="btn btn-outline-primary shadow-sm rounded-pill px-4" for="purifier"><i class="bi bi-droplet-half"></i> Water Purifier</label>
                        </div>
                    </div>
                </div>


                <!-- Rules Section -->
                <div class="mb-3">
                    <label class="form-label fw-bold text-primary">Rules</label>
                    <div class="row">
                        <div class="col d-flex flex-wrap gap-2">
                            <input type="checkbox" class="btn-check" id="no-smoking" name="Rules" value="No Smoking">
                            <label class="btn btn-outline-danger shadow-sm rounded-pill px-4" for="no-smoking"><i class="bi bi-x-circle"></i> No Smoking</label>

                            <input type="checkbox" class="btn-check" id="no-pets" name="Rules" value="No Pets">
                            <label class="btn btn-outline-warning shadow-sm rounded-pill px-4" for="no-pets"><i class="bi bi-paw"></i> No Pets</label>

                            <input type="checkbox" class="btn-check" id="visitor-policy" name="Rules" value="Visitor Policy">
                            <label class="btn btn-outline-info shadow-sm rounded-pill px-4" for="visitor-policy"><i class="bi bi-person-circle"></i> Visitor Policy</label>

                            <input type="checkbox" class="btn-check" id="curfew" name="Rules" value="Curfew">
                            <label class="btn btn-outline-primary shadow-sm rounded-pill px-4" for="curfew"><i class="bi bi-clock"></i> Curfew</label>

                            <input type="checkbox" class="btn-check" id="damage-policy" name="Rules" value="Damage Policy">
                            <label class="btn btn-outline-success shadow-sm rounded-pill px-4" for="damage-policy"><i class="bi bi-shield-lock"></i> Damage Policy</label>
                        </div>
                    </div>
                </div>


                <!-- Upload Images Section -->
                <div class="mb-3">
                    <i class="bi bi-images"></i>  @Html.Label("Upload Images", new { @class = "form-label fw-bold" })

                    <!-- Custom Drag & Drop Area -->
                    <div id="dropZone" class="border border-primary border-dashed rounded-4 p-4 text-center shadow-sm">
                        <i class="bi bi-cloud-upload-fill display-4 text-primary"></i>
                        <p class="mt-2 text-secondary">Drag & Drop images here or click to browse</p>
                        <input type="file" name="ImageFiles" class="form-control d-none" id="imageUpload" multiple>
                    </div>

                    <!-- Image Preview Container -->
                    <div class="mt-3 row g-3" id="imagePreview"></div>
                </div>



                <!-- Custom Styles -->
                <style>
                    #dropZone {
                        cursor: pointer;
                        background: #f8f9fa;
                        transition: background 0.3s ease-in-out;
                    }

                        #dropZone:hover {
                            background: #e9ecef;
                        }

                    .image-preview {
                        position: relative;
                        max-height: 120px;
                        object-fit: cover;
                        border-radius: 10px;
                        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
                    }

                    .delete-btn {
                        position: absolute;
                        top: 5px;
                        right: 5px;
                        background: rgba(0, 0, 0, 0.7);
                        color: white;
                        border-radius: 50%;
                        width: 24px;
                        height: 24px;
                        text-align: center;
                        font-size: 14px;
                        line-height: 24px;
                        cursor: pointer;
                    }
                </style>

                <!-- JavaScript for Drag & Drop and Image Previews -->
                <script>
                    let dropZone = document.getElementById("dropZone");
                    let fileInput = document.getElementById("imageUpload");
                    let previewContainer = document.getElementById("imagePreview");
                    let fileArray = [];

                    dropZone.addEventListener("click", () => fileInput.click());

                    dropZone.addEventListener("dragover", (e) => {
                        e.preventDefault();
                        dropZone.classList.add("border-success");
                    });

                    dropZone.addEventListener("dragleave", () => {
                        dropZone.classList.remove("border-success");
                    });

                    dropZone.addEventListener("drop", (e) => {
                        e.preventDefault();
                        dropZone.classList.remove("border-success");
                        handleFiles(e.dataTransfer.files);
                    });

                    fileInput.addEventListener("change", () => handleFiles(fileInput.files));

                    function handleFiles(files) {
                        Array.from(files).forEach(file => {
                            if (!fileArray.some(f => f.name === file.name)) {
                                fileArray.push(file);
                            }
                        });
                        updatePreview();
                    }

                    function updatePreview() {
                        previewContainer.innerHTML = "";
                        fileArray.forEach((file, index) => {
                            let reader = new FileReader();
                            reader.onload = function (e) {
                                let div = document.createElement("div");
                                div.className = "col-md-3 position-relative";
                                div.innerHTML = `
                                                                                                                                                                                    <img src="${e.target.result}" class="image-preview w-100">
                                                                                                                                                                                    <span class="delete-btn" onclick="removeImage(${index})">&times;</span>
                                                                                                                                                                                `;
                                previewContainer.appendChild(div);
                            };
                            reader.readAsDataURL(file);
                        });

                        updateFileInput();
                    }

                    function removeImage(index) {
                        fileArray.splice(index, 1);
                        updatePreview();
                    }

                    function updateFileInput() {
                        let dataTransfer = new DataTransfer();
                        fileArray.forEach(file => dataTransfer.items.add(file));
                        fileInput.files = dataTransfer.files;
                    }
                </script>









                <!-- Submit Button -->
                <button type="submit" class="btn btn-primary w-100 shadow-sm" id="submitBtn">Post Property</button>
            </div>
        </div>
    }


</div>
<style>
    /* Overlay for dimming background */
    .error-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        backdrop-filter: blur(5px);
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease-in-out;
    }

    /* Error Message Box */
    .error-box {
        background: rgba(255, 0, 0, 0.9);
        color: #fff;
        padding: 20px;
        width: 90%;
        max-width: 380px;
        border-radius: 15px;
        text-align: center;
        box-shadow: 0px 8px 20px rgba(0, 0, 0, 0.3);
        transform: scale(0.8);
        transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
    }

    /* Animated Icon */
    .error-icon {
        font-size: 40px;
        animation: shake 0.6s ease-in-out infinite alternate;
    }

    /* List Styling */
    .error-list {
        text-align: left;
        margin-top: 10px;
        font-size: 14px;
    }

    /* Close Button */
    .close-btn {
        margin-top: 10px;
        padding: 8px 20px;
        background: white;
        color: red;
        font-weight: bold;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .close-btn:hover {
        background: #ffdddd;
    }

    /* Shake Animation */
   
</style>

<div id="errorOverlay" class="error-overlay">
    <div class="error-box">
        <div class="error-icon">⚠️</div>
        <h3>Oops! Missing Fields</h3>
        <ul id="errorList" class="error-list"></ul>
        <button class="close-btn" onclick="closeError()">OK</button>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.getElementById("submitBtn").addEventListener("click", function (event) {
            let requiredFields = ["Title", "Price", "Contact", "City", "State", "Description", "LocationLink", "Address"];
            let isValid = true;
            let errorMessage = "";
            let firstInvalidField = null;

            // Clear previous errors
            let errorOverlay = document.getElementById("errorOverlay");
            let errorList = document.getElementById("errorList");
            errorList.innerHTML = "";
            errorOverlay.style.opacity = "0";
            errorOverlay.style.visibility = "hidden";

            requiredFields.forEach(function (field) {
                let inputElement = document.getElementById(field);
                if (inputElement) {
                    inputElement.classList.remove("border-danger");
                }
            });

            // Check for empty fields
            requiredFields.forEach(function (field) {
                let inputElement = document.getElementById(field);
                if (inputElement && inputElement.value.trim() === "") {
                    isValid = false;
                    errorMessage += `<li>⚡ ${field.replace(/([A-Z])/g, ' $1')}</li>`;
                    inputElement.classList.add("border-danger");
                    if (!firstInvalidField) {
                        firstInvalidField = inputElement;
                    }
                }
            });

            if (!isValid) {
                event.preventDefault(); // Prevent form submission

                errorList.innerHTML = errorMessage;
                errorOverlay.style.opacity = "1";
                errorOverlay.style.visibility = "visible";
                errorOverlay.querySelector(".error-box").style.transform = "scale(1)";

                if (firstInvalidField) {
                    firstInvalidField.scrollIntoView({ behavior: "smooth", block: "center" });
                    firstInvalidField.focus();
                }
            }
        });
    });

    function closeError() {
        let errorOverlay = document.getElementById("errorOverlay");
        errorOverlay.style.opacity = "0";
        errorOverlay.style.visibility = "hidden";
    }
</script>
